You are an engineer proficient in Svelte.

# Task Description

Your task is to write Svelte code for a website that meets my requirements.

I will provide you with the following:

1. Function descriptions of each component and their types:
   The component types will be given in a fixed format:
   Component Keyword:
   Component Function Description.
   @@@Svelte Component Type@@@

2. Page Transition Graph (PTG)
   Formal Definition of PTG:
   A Page Transition Graph is a directed graph G = (N, E), where:

N is the set of nodes representing the various screens (pages) in the App. Each node n ∈ N represents a specific screen and has the following attributes:

* id: A unique identifier for the node, typically a string or integer.
* name: The name of the screen, used for readability and code generation.
* type: The type of the screen, such as "login page," "list page," "detail page," etc., to guide code generation.
* props: Other attributes of the screen, such as element layout, style, etc., to describe the screen in detail.

E is the set of directed edges (Edge) representing the transition relationships between screens. Each edge e = (n1, n2, c) ∈ E represents a transition from screen n1 to screen n2 and has the following attributes:

* id: A unique identifier for the edge.
* from: The id of the starting node n1.
* to: The id of the target node n2.
* conditions: The condition c that triggers this transition, usually a boolean expression.
* actions: The actions that need to be performed during the transition, such as data transfer, state update, etc.

3. A complete website UI screenshot.

# Component Types and Function Description

{component_type}

# Page Transition Graph (PTG)

{PTG}

# Complete App UI screenshot

Note:
Pay attention to the characteristics of declarative UI in the Svelte code:

* Declarative Description: Describe the result of UI rendering in the `<script>`, `<style>`, and markup sections.
* State-Driven View Update: Define state variables using `let` or Svelte stores, and use these variables for data rendering in components. Once the state data changes, the UI automatically re-renders.
* Developers do not directly manipulate DOM elements but change the rendering state of components by modifying reactive variables.
* Include proper event handling in the code: Components can set the response logic for multiple events using `on:click`, `on:input`, etc.
* Reflect appropriate instant effects in the code based on the function descriptions of each component, such as the camera icon corresponding to the action of opening the camera upon click.
* When using string interpolation, pay attention to the syntax: In Svelte, string interpolation is done with `{{expression}}` directly inside markup.
* When implementing page transitions based on the PTG, use svelte-spa-router for navigation. For example:

```js
import {{ push, pop, replace }} from 'svelte-spa-router'

// Navigate to a new page
push('/page');

// Go back to previous page
pop();

// Replace current page
replace('/page');
```

Replace "/page" with the actual route path corresponding to the target node ID in the PTG. Ensure that you pass any necessary data to the new page if required by the PTG's action specifications.

* For back navigation, use `pop()` from svelte-spa-router when appropriate.

* If you need to replace the current page instead of adding to the navigation stack, use `replace()` instead of `push()`.

* Pay attention to special characters in strings (`$`, `'`, `"`, etc.) and escape them when necessary.

* The routing setup is assumed to be already configured with svelte-spa-router in the main App.svelte. Please focus exclusively on writing the specific implementation for the designated page component. Do not include implementations of other node_id pages in this code. Please strictly adhere to the naming convention `{node_id}Page.svelte` and do not use any other custom component names.

The information I am providing to you now is about the page with Node id {node_id}. You must consider the transition logic between pages based on the PTG. When navigating to another page in the code, ensure that the page route matches the node ID in the PTG. I will provide you with the information about other pages one by one later. You should return to me a piece of Svelte code that implements component type descriptions and the transition logic between pages based on the PTG. The page with Node id {node_id} should contain navigation to these pages {navigation_list}, and do not omit any page. Please strictly adhere to the component types and PTG to write a standardized Svelte code. And the images within are represented by `assets/images/template.png`. Import images using `<img src="assets/images/template.png" alt="template" />` instead of using network images.

Your response should only contain code, without any additional prompt information, and do not include any copyable code block markup in the output.