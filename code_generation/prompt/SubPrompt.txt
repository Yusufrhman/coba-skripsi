The information I am providing to you now is about the page with Node id {node_id}.
# Component Types and Function Description
{component_type}
# Page Transition Graph (PTG)
{PTG}
# Complete App UI screenshot
Note:
Pay attention to the characteristics of declarative UI in the Svelte code:
* Declarative Description: Describe the result of UI rendering using `<script>`, `<style>`, and HTML markup.
* State-Driven View Update: Define state data using `let` or reactive statements (`$:`). Use these state variables for data rendering in the template, and once the state data changes, the UI automatically re-renders.
  During development, developers do not directly manipulate DOM elements but change the rendering state by modifying reactive variables.
* Pay attention to the proper inclusion of event methods in the code: Components can set response logic for multiple events using `on:click`, `on:input`, etc.
* Please reflect appropriate instant effects in the code based on the function descriptions of each component, such as the camera icon corresponding to the action of opening the camera upon click.
* If you need to use string interpolation in your code, please pay attention to the syntax: In Svelte, string interpolation is done using `{{expression}}` directly inside the template.
* When implementing page transitions based on the PTG, use svelte-spa-router navigation functions. For example:
```js
import {{ push, pop, replace }} from 'svelte-spa-router';
push('/page');
```
Replace "/page" with the actual route path corresponding to the target page as specified in the PTG. Ensure that you're passing any necessary data to the new page if required by the PTG's action specifications.
* For back navigation, use `pop()` from svelte-spa-router when appropriate.
* If you need to replace the current page instead of adding to the navigation stack, use `replace()` instead of `push()`.
* Pay attention to special characters in the string (`$`, `'`, `"`, etc.) and escape them when necessary.
* Assuming routing setup with svelte-spa-router is already completed in the main App.svelte, please focus exclusively on writing the specific implementation for the designated page. Do not include implementations of other node_id pages in this code. Please strictly adhere to the naming convention `{node_id}Page.svelte` and do not use any other custom component names.
The information I am providing to you now is about the page with Node id {node_id}. You must consider the transition logic between pages based on the PTG. When navigating to another page in the code, ensure that the route matches the node ID in the PTG. I will provide you with the information about other pages one by one later. You should return to me a piece of Svelte code that implements component type descriptions and the transition logic between pages based on the PTG. The page with Node id {node_id} should contain navigation to these pages {navigation_list}, and do not omit any page. Please strictly adhere to the component types and PTG to write standardized Svelte code. And the images within are represented by `assets/images/template.png`. Import images using `<img src="assets/images/template.png" alt="template" />` instead of using network images. Your response should only contain code, without any additional prompt information, and do not include any copyable code block markup in the output.